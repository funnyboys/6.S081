int fork()              Create a process, return child’s PID.
int exit(int status)    Terminate the current process; status reported to wait(). No return.
int wait(int *status)   Wait for a child to exit; exit status in *status; returns child PID.
int kill(int pid)       Terminate process PID. Returns 0, or -1 for error.
int getpid()            Return the current process’s PID.
int sleep(int n)        Pause for n clock ticks.
int exec(char *ﬁle, char *argv[]) 
                        Load a ﬁle and execute it with arguments; only returns if error.
char *sbrk(int n)       Grow process’s memory by n bytes. Returns start of new memory.
int open(char *ﬁle, int ﬂags) 
                        Open a ﬁle; ﬂags indicate read/write; returns an fd (ﬁle descriptor).
int write(int fd, char *buf, int n) 
                        Write n bytes from buf to ﬁle descriptor fd; returns n.
int read(int fd, char *buf, int n) 
                        Read n bytes into buf; returns number read; or 0 if end of ﬁle.
int close(int fd)       Release open ﬁle fd.
int dup(int fd)         Return a new ﬁle descriptor referring to the same ﬁle as fd.
int pipe(int p[])       Create a pipe, put read/write ﬁle descriptors in p[0] and p[1].
int chdir(char *dir)    Change the current directory.
int mkdir(char *dir)    Create a new directory.
int mknod(char *ﬁle, int, int) 
                        Create a device ﬁle.
int fstat(int fd, struct stat *st) 
                        Place info about an open ﬁle into *st.
int stat(char *ﬁle, struct stat *st) 
                        Place info about a named ﬁle into *st.
int link(char *ﬁle1, char *ﬁle2) 
                        Create another name (ﬁle2) for the ﬁle ﬁle1.
int unlink(char *ﬁle)   Remove a ﬁle.